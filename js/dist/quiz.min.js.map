{"version":3,"sources":["quiz.js"],"names":["quizInstance","Quiz","questions","_classCallCheck","this","score","shuffleQuestions","timer","currentQuestionIndex","totalQuestions","userAnswers","limit","sort","Math","random","slice","selectedOption","answer","shuffled","questionIndex","i","getSavedAnswer","document","querySelector","textContent","concat","percentage","remarksEl","toFixed","correctEl","incorrectEl","unansweredEl","scoreEl","Object","keys","length","UI","quiz","questionEl","currentQuestion","question","optionsEl","summaryEl","option","optionDiv","dataset","index","classList","add","appendChild","updateQuestionTracker","optionEl","questionContainer","remove","innerHTML","className","seconds","minutes","parseInt","timerDisplay","clearInterval","interval","options","showFinalResults","querySelectorAll","displayQuestionContent","setInterval","style","display","startTimer","addEventListener","e","target","submitQuiz","contains","getRemarks","prevQuestion","Store","getResult","nextButton"],"mappings":"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","file":"quiz.min.js","sourcesContent":["// Quiz Class\nclass Quiz {\n    constructor(questions) {\n        this.score = 0;\n        this.questions = this.shuffleQuestions(questions, 30);\n        this.timer = 900; // 15 minutes in seconds\n        this.currentQuestionIndex = 0;\n        this.totalQuestions = 30;\n        this.userAnswers = {};\n    }\n\n    // Shuffle and limit questions\n    shuffleQuestions(questions, limit) {\n        const shuffled = questions.sort( () => 0.5 - Math.random());\n        return shuffled.slice(0, limit);\n    }\n\n// Check answer \n    checkAnswer(selectedOption) {\n        const currentQuestion = this.questions[this.currentQuestionIndex];\n        if (selectedOption === currentQuestion.answer) {\n            this.score++;\n            return true;\n        }\n        return false;\n    }\n\n     // save user's answer\n    saveAnswer(questionIndex, selectedOption) {\n        this.userAnswers[questionIndex] = selectedOption;\n    }\n    \n    //  get saved answer\n    getSavedAnswer(questionIndex) {\n        return this.userAnswers[questionIndex];\n    }\n\n    // Submit quiz\n    submitQuiz() {\n\n        // calculate final score \n        this.score = 0;\n        for (let i = 0; i < this.totalQuestions; i++) {\n            const savedAnswer = this.getSavedAnswer(i);\n            const correctAnswer = this.questions[i].answer;\n            if (savedAnswer === correctAnswer) {\n                this.score++;\n            }\n        }\n\n        // Logic to handle quiz submission\n        const scoreEl = document.querySelector('.quiz-score');\n        scoreEl.textContent = `${this.score} / ${this.totalQuestions}`;\n \n    }\n\n    //Quiz remarks \n    getRemarks() {\n        const percentage = (this.score / this.totalQuestions) * 100;\n        const remarksEl = document.querySelector('.quiz-remarks');\n        if (percentage >= 80) {\n            remarksEl.textContent = `Excellent Work! You scored ${percentage.toFixed(2)}%`;\n        } else if (percentage >= 50) {\n            remarksEl.textContent = `Great job! You scored ${percentage.toFixed(2)}%`;\n        } else {\n            remarksEl.textContent = `You scored ${percentage.toFixed(2)}%. Better luck next time!`;\n        }\n    }\n\n    // Quiz summary\n    getSummary() {\n        const summaryEl = document.querySelector('.quiz-summary');\n        const correctEl = document.querySelector('#correct-answers');\n        const incorrectEl = document.querySelector('#incorrect-answers');\n        const unansweredEl = document.querySelector('#unanswered-questions');\n\n        correctEl.textContent = this.score;\n        incorrectEl.textContent = this.totalQuestions - this.score;\n        unansweredEl.textContent = this.totalQuestions - Object.keys(this.userAnswers).length;\n    }\n}\n\n\n// UI Class\nclass UI {\n    static displayQuestionContent(quiz) {\n        const questionContainer = document.querySelector('.question-content');\n        const questionEl = document.querySelector('.question-text');\n        const optionsEl = document.querySelector('.question-options');\n\n    // Current Question\n    const currentQuestion = quiz.questions[quiz.currentQuestionIndex];\n\n    // Display question\n    questionEl.textContent = currentQuestion.question;\n\n    // clear old options \n    optionsEl.innerHTML = '';\n\n    // Display options\n    currentQuestion.options.forEach( (option, index) => {\n        const optionDiv = document.createElement('div');\n        optionDiv.className = 'option';\n        optionDiv.textContent = option;\n        optionDiv.dataset.index = index;\n\n         // show previously selected option\n        if (option === quiz.getSavedAnswer(quiz.currentQuestionIndex)) {\n            optionDiv.classList.add('selected');\n        }\n\n        optionsEl.appendChild(optionDiv);\n    });\n\n\n    // Update question tracker\n    this.updateQuestionTracker(quiz);\n}\n\n    // Add selected class to a selected  option\n    static selectedOption(optionEl) {\n        const options = document.querySelectorAll('.option');\n        options.forEach(option => option.classList.remove('selected'));\n        optionEl.classList.add('selected');\n    }\n\n    // question tracker\n    static updateQuestionTracker(quiz) {\n        const trackerEl = document.querySelector('.question-tracker');\n        trackerEl.textContent = `${quiz.currentQuestionIndex + 1} / ${quiz.totalQuestions}`;\n    }\n\n    // Timer\n    static startTimer(quiz) {\n        let timer = quiz.timer, minutes, seconds;\n        let timerDisplay = document.querySelector('.timer-display');\n        \n        // Update the timer every second\n        const interval = setInterval( () => {\n            minutes = parseInt(timer / 60, 10);\n            seconds = parseInt(timer % 60, 10);\n\n            minutes = minutes < 10 ? \"0\" + minutes : minutes;\n            seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n            timerDisplay.textContent = `${minutes}:${seconds}`;\n\n            if (--timer < 0) {\n                clearInterval(interval);\n                // Time's up logic here\n                UI.showFinalResults(quiz);\n            }\n        }, 1000);\n    }\n\n    // Move to next question\n    static nextQuestion(quiz) {\n        if (quiz.currentQuestionIndex < quiz.totalQuestions - 1) {\n            quiz.currentQuestionIndex++;\n            this.displayQuestionContent(quiz);\n        }\n    }\n\n    // Move to previous question\n    static prevQuestion(quiz) {\n        if (quiz.currentQuestionIndex > 0) {\n            quiz.currentQuestionIndex--;\n            this.displayQuestionContent(quiz);\n        }\n    }\n\n    // Show results\n    static showFinalResults(quiz) {\n    quiz.submitQuiz();\n    quiz.getRemarks();\n    quiz.getSummary();\n\n\n    // Stop the timer\n    const timerDisplay = document.querySelector('.timer-display');\n    timerDisplay.textContent = '00:00';\n\n    // Hide quiz section and show results section\n    document.querySelector('.question-container').style.display = 'none';\n    document.querySelector('.result-container').style.display = 'block';\n    }\n\n}\n\n\n// Local Storage\nclass Store {}\n\n\n// Event listeners\n\n// store quiz instance globally\nlet quizInstance;\n\n// display question on DOM load\ndocument.addEventListener('DOMContentLoaded', () => {\n    quizInstance = new Quiz(questions);\n    UI.displayQuestionContent(quizInstance);\n    UI.startTimer(quizInstance);\n});\n\n// Handle option selection\ndocument.querySelector('.question-options').addEventListener('click', (e) => {\n    if (e.target.classList.contains('option')) {\n        UI.selectedOption(e.target);\n\n        // Save selected option\n        const selectedOption = e.target.textContent;\n        quizInstance.saveAnswer(quizInstance.currentQuestionIndex, selectedOption);\n    }\n});\n\n\n// Handle previous button \ndocument.querySelector('.prev-button').addEventListener('click', () => {\n    UI.prevQuestion(quizInstance);\n});\n\n// Handle next button and submit button\nconst  nextButton = document.querySelector('.next-button');\nnextButton.addEventListener('click', getResult);\n\nfunction getResult() {\n    if (quizInstance.currentQuestionIndex === quizInstance.totalQuestions - 1) {\n        // Show final results\n        UI.showFinalResults(quizInstance);\n\n\n    } else {\n        // Move to next question\n        UI.nextQuestion(quizInstance);\n\n         // Check if NEXT question is the last one, then change button text\n        if (quizInstance.currentQuestionIndex === quizInstance.totalQuestions - 1) {\n            nextButton.textContent = 'Submit';\n        }\n    }\n}"]}