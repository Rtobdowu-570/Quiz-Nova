{"version":3,"sources":["quiz.js"],"names":["quizInstance","Quiz","questions","_classCallCheck","this","score","skipShuffle","shuffleQuestions","timer","currentQuestionIndex","totalQuestions","userAnswers","timerInterval","clearInterval","limit","sort","Math","random","slice","selectedOption","answer","questionIndex","shuffled","i","getSavedAnswer","textContent","concat","percentage","remarksEl","document","querySelector","toFixed","correctEl","incorrectEl","unansweredEl","scoreEl","Object","keys","length","UI","quiz","optionsEl","questionEl","currentQuestion","question","innerHTML","index","option","dataset","optionDiv","classList","add","appendChild","updateQuestionTracker","optionEl","querySelectorAll","questionContainer","minutes","seconds","className","setInterval","parseInt","options","showFinalResults","displayQuestionContent","timerDisplay","getSummary","Store","style","display","localStorage","setItem","STORAGE_KEY","PROGRESS","JSON","stringify","progress","console","error","_context2","t0","getItem","savedProgress","parse","_context3","removeItem","History","getHistory","quizRecord","date","Date","toISOString","split","Answers","_formatAnswers","timeTaken","remarks","summary","unshift","RESULTS","_context4","forEach","userAnswer","formattedAnswers","selected","correct","isCorrect","history","addEventListener","shouldResume","regeneratorRuntime","async","_context5","prev","next","hasSavedProgress","confirm","awrap","loadProgress","sent","clearProgress","startTimer","stop","e","_context6","target","contains","saveAnswer","nextButton","nextQuestion","saveProgress","getResult"],"mappings":"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","file":"quiz.min.js","sourcesContent":["// Quiz Class\nclass Quiz {\n    constructor(questions) {\n        this.score = 0;\n        this.questions = skipShuffle ? questions : this.shuffleQuestions(questions, 30);\n        this.timer = 900; // 15 minutes in seconds\n        this.currentQuestionIndex = 0;\n        this.totalQuestions = 30;\n        this.userAnswers = {};\n        this.timerInterval = null;\n    }\n\n    // Stop timer\n        stopTimer() {\n            if(this.timerInterval) {\n                clearInterval(this.timerInterval);\n                this.timerInterval = null;\n            }\n        }\n\n    // Shuffle and limit questions\n    shuffleQuestions(questions, limit) {\n        const shuffled = questions.sort( () => 0.5 - Math.random());\n        return shuffled.slice(0, limit);\n    }\n\n// Check answer \n    checkAnswer(selectedOption) {\n        const currentQuestion = this.questions[this.currentQuestionIndex];\n        if (selectedOption === currentQuestion.answer) {\n            this.score++;\n            return true;\n        }\n        return false;\n    }\n\n     // save user's answer\n    saveAnswer(questionIndex, selectedOption) {\n        this.userAnswers[questionIndex] = selectedOption;\n    }\n    \n    //  get saved answer\n    getSavedAnswer(questionIndex) {\n        return this.userAnswers[questionIndex];\n    }\n\n    // Submit quiz\n    submitQuiz() {\n\n        // calculate final score \n        this.score = 0;\n        for (let i = 0; i < this.totalQuestions; i++) {\n            const savedAnswer = this.getSavedAnswer(i);\n            const correctAnswer = this.questions[i].answer;\n            if (savedAnswer === correctAnswer) {\n                this.score++;\n            }\n        }\n\n        // Logic to handle quiz submission\n        const scoreEl = document.querySelector('.quiz-score');\n        scoreEl.textContent = `${this.score} / ${this.totalQuestions}`;\n \n    }\n\n    //Quiz remarks \n    getRemarks() {\n        const percentage = (this.score / this.totalQuestions) * 100;\n        const remarksEl = document.querySelector('.quiz-remarks');\n        if (percentage >= 80) {\n            remarksEl.textContent = `Excellent Work! You scored ${percentage.toFixed(2)}%`;\n        } else if (percentage >= 50) {\n            remarksEl.textContent = `Great job! You scored ${percentage.toFixed(2)}%`;\n        } else {\n            remarksEl.textContent = `You scored ${percentage.toFixed(2)}%. Better luck next time!`;\n        }\n    }\n\n    // Quiz summary\n    getSummary() {\n        const summaryEl = document.querySelector('.quiz-summary');\n        const correctEl = document.querySelector('#correct-answers');\n        const incorrectEl = document.querySelector('#incorrect-answers');\n        const unansweredEl = document.querySelector('#unanswered-questions');\n\n        correctEl.textContent = this.score;\n        incorrectEl.textContent = this.totalQuestions - this.score;\n        unansweredEl.textContent = this.totalQuestions - Object.keys(this.userAnswers).length;\n    }\n}\n\n\n// UI Class\nclass UI {\n    static displayQuestionContent(quiz) {\n        const questionContainer = document.querySelector('.question-content');\n        const questionEl = document.querySelector('.question-text');\n        const optionsEl = document.querySelector('.question-options');\n\n    // Current Question\n    const currentQuestion = quiz.questions[quiz.currentQuestionIndex];\n\n    // Display question\n    questionEl.textContent = currentQuestion.question;\n\n    // clear old options \n    optionsEl.innerHTML = '';\n\n    // Display options\n    currentQuestion.options.forEach( (option, index) => {\n        const optionDiv = document.createElement('div');\n        optionDiv.className = 'option';\n        optionDiv.textContent = option;\n        optionDiv.dataset.index = index;\n\n         // show previously selected option\n        if (option === quiz.getSavedAnswer(quiz.currentQuestionIndex)) {\n            optionDiv.classList.add('selected');\n        }\n\n        optionsEl.appendChild(optionDiv);\n    });\n\n\n    // Update question tracker\n    this.updateQuestionTracker(quiz);\n}\n\n    // Add selected class to a selected  option\n    static selectedOption(optionEl) {\n        const options = document.querySelectorAll('.option');\n        options.forEach(option => option.classList.remove('selected'));\n        optionEl.classList.add('selected');\n    }\n\n    // question tracker\n    static updateQuestionTracker(quiz) {\n        const trackerEl = document.querySelector('.question-tracker');\n        trackerEl.textContent = `${quiz.currentQuestionIndex + 1} / ${quiz.totalQuestions}`;\n    }\n\n    // Timer\n    static startTimer(quiz) {\n        let timer = quiz.timer, minutes, seconds;\n        let timerDisplay = document.querySelector('.timer-display');\n\n        // clear any existing timer\n        if (quiz.timerInterval) {\n            clearInterval(quiz.timerInterval);\n        }\n\n        \n        // Update the timer every second\n        quiz.timerInterval = setInterval( () => {\n            minutes = parseInt(timer / 60, 10);\n            seconds = parseInt(timer % 60, 10);\n\n            minutes = minutes < 10 ? \"0\" + minutes : minutes;\n            seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n            timerDisplay.textContent = `${minutes}:${seconds}`;\n\n            if (--timer < 0) {\n                clearInterval(quiz.timerInterval);\n                quiz.timerInterval = null;\n                // Time's up, submit the quiz\n                UI.showFinalResults(quiz);\n            }\n            quiz.timer = timer; // update quiz timer state\n        }, 1000);\n    }\n\n    // Move to next question\n    static nextQuestion(quiz) {\n        if (quiz.currentQuestionIndex < quiz.totalQuestions - 1) {\n            quiz.currentQuestionIndex++;\n            this.displayQuestionContent(quiz);\n        }\n    }\n\n    // Move to previous question\n    static prevQuestion(quiz) {\n        if (quiz.currentQuestionIndex > 0) {\n            quiz.currentQuestionIndex--;\n            this.displayQuestionContent(quiz);\n        }\n    }\n\n    // Show results\n    static  async showFinalResults(quiz) {\n    quiz.stopTimer();\n    quiz.submitQuiz();\n    quiz.getRemarks();\n    quiz.getSummary();\n    await Store.saveCompletedQuiz(quiz);\n    Store.clearProgress();\n\n\n    // Stop the timer\n    const timerDisplay = document.querySelector('.timer-display');\n    timerDisplay.textContent = '00:00';\n\n    // Hide quiz section and show results section\n    document.querySelector('.question-container').style.display = 'none';\n    document.querySelector('.result-container').style.display = 'block';\n    }\n\n}\n\n\n// Local Storage \nclass Store {\n\n\n    // Auto save Quiz progress\n    static async saveProgress(quiz) {\n        try {\n            const progress = {\n                currentQuestionIndex: quiz.currentQuestionIndex,\n                timer: quiz.timer,\n                userAnswers: quiz.userAnswers,\n                questions: quiz.questions,\n            }\n                localStorage.setItem(this.STORAGE_KEY.PROGRESS, JSON.stringify(progress));\n            return true;\n        } catch(error) {\n            console.error('Error Saving progress:', error);\n            return false;\n        }\n    }\n\n    // load saved quiz progress\n    static async loadProgress() {\n                try {\n                    const savedProgress = localStorage.getItem(this.STORAGE_KEY.PROGRESS);\n                    return savedProgress ? JSON.parse(savedProgress) : null;\n                } catch(error) {\n                    console.error('Error loading progress:', error);\n                    return null;\n                }\n            }\n\n    // check for saved progress\n        static hasSavedProgress() {\n            return localStorage.getItem(this.STORAGE_KEY.PROGRESS) !== null;\n        }\n\n    // clear saved progress after quiz completion\n        static clearProgress() {\n        try {\n            localStorage.removeItem(this.STORAGE_KEY.PROGRESS); \n        } catch(error) {\n            console.error('Error clearing progress:', error);\n        }\n        }\n\n\n    // Save Completed quiz results\n    static async saveCompletedQuiz(quiz) {\n        try {\n            const History = this.getHistory()\n\n            const quizRecord = {\n                date: new Date().toISOString().split('T')[0],\n                score: quiz.score,\n                totalQuestions: quiz.totalQuestions,\n                Answers: this._formatAnswers(quiz),\n                timeTaken: 900 - quiz.timer, // time taken in seconds\n                remarks: quiz.remarks,\n                summary: quiz.summary,\n            };\n\n            History.unshift(quizRecord);\n                localStorage.setItem(this.STORAGE_KEY.RESULTS, JSON.stringify(History));\n            return true;\n        }  catch(error) {\n            console.error('Error saving completed quiz:', error);\n            return false;\n        }\n    };\n\n    // Format Answers\n    static _formatAnswers(quiz) {\n        const formattedAnswers = {};\n\n        quiz.questions.forEach( (question, index) => {\n            const userAnswer = quiz.userAnswers[index];\n            formattedAnswers[index] = {\n                question: question.question,\n                options: question.options,\n                selected: userAnswer || 'Unanswered',\n                correct: question.answer,\n                isCorrect: userAnswer === question.answer,\n            };\n        });\n        return formattedAnswers;\n    };\n\n    // Get quiz history\n    static getHistory() {\n        try {\n            const history = localStorage.getItem(this.STORAGE_KEY.RESULTS); \n            return history ? JSON.parse(history) : [];\n        } catch(error) {\n            console.error('Error getting quiz history:', error);\n            return [];\n        }\n    };\n}\n\n// Storage keys\nStore.STORAGE_KEY = {\n    PROGRESS: 'quizProgress',\n    RESULTS: 'quizResults',\n};\n\n\n// Event listeners\n\n// store quiz instance globally\nlet quizInstance;\n\n// display question on DOM load\ndocument.addEventListener('DOMContentLoaded', async () => {\n    if (Store.hasSavedProgress()) {\n        const shouldResume = confirm('You have a saved quiz progress. Do you want to resume?');\n        const progress = await Store.loadProgress();\n    if (shouldResume && progress) {\n        // Resume saved quiz\n        quizInstance = new Quiz(progress.questions, true); // Use saved questions or default\n        quizInstance.currentQuestionIndex = progress.currentQuestionIndex;\n        quizInstance.timer = progress.timer;\n        quizInstance.userAnswers = progress.userAnswers;\n    }  else{\n        // Clear saved progress and start new quiz\n        Store.clearProgress();\n        quizInstance = new Quiz(questions);\n    }\n\n    } else {\n        // No saved progress, start new quiz\n        quizInstance = new Quiz(questions);\n    }\n    UI.displayQuestionContent(quizInstance);\n        UI.startTimer(quizInstance);\n});\n\n// Handle option selection\ndocument.querySelector('.question-options').addEventListener('click', async (e) => {\n    if (e.target.classList.contains('option')) {\n        UI.selectedOption(e.target);\n\n        // Save selected option\n        const selectedOption = e.target.textContent;\n        quizInstance.saveAnswer(quizInstance.currentQuestionIndex, selectedOption);\n        await Store.saveProgress(quizInstance);\n    }\n});\n\n\n// Handle previous button \ndocument.querySelector('.prev-button').addEventListener('click', () => {\n    UI.prevQuestion(quizInstance);\n});\n\n// Handle next button and submit button\nconst  nextButton = document.querySelector('.next-button');\nnextButton.addEventListener('click', getResult);\n\nasync function getResult() {\n    if (quizInstance.currentQuestionIndex === quizInstance.totalQuestions - 1) {\n        // Show final results\n       await UI.showFinalResults(quizInstance);\n\n\n    } else {\n        // Move to next question\n        UI.nextQuestion(quizInstance);\n        await Store.saveProgress(quizInstance);\n\n         // Check if NEXT question is the last one, then change button text\n        if (quizInstance.currentQuestionIndex === quizInstance.totalQuestions - 1) {\n            nextButton.textContent = 'Submit';\n        }\n    }\n}"]}