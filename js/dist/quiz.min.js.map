{"version":3,"sources":["quiz.js"],"names":["quizInstance","Quiz","questions","_classCallCheck","this","score","shuffleQuestions","timer","currentQuestionIndex","totalQuestions","userAnswers","timerInterval","clearInterval","limit","sort","Math","random","slice","selectedOption","answer","questionIndex","shuffled","i","getSavedAnswer","textContent","concat","percentage","remarksEl","document","querySelector","toFixed","correctEl","incorrectEl","unansweredEl","scoreEl","Object","keys","length","UI","quiz","optionsEl","questionEl","currentQuestion","question","innerHTML","index","option","dataset","optionDiv","classList","add","appendChild","updateQuestionTracker","optionEl","querySelectorAll","questionContainer","minutes","seconds","className","setInterval","parseInt","options","showFinalResults","displayQuestionContent","timerDisplay","getSummary","Store","saveCompletedQuiz","style","display","localStorage","setItem","STORAGE_KEY","PROGRESS","JSON","stringify","progress","error","stopTimer","console","getItem","parse","savedProgress","removeItem","getHistory","quizRecord","toISOString","_formatAnswers","timeTaken","remarks","summary","History","unshift","RESULTS","formattedAnswers","forEach","selected","userAnswer","correct","isCorrect","history","date","addEventListener","hasSavedProgress","confirm","startTimer","clearProgress","e","target","contains","saveAnswer","saveProgress","prevQuestion","nextQuestion"],"mappings":"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","file":"quiz.min.js","sourcesContent":["// Quiz Class\nclass Quiz {\n    constructor(questions) {\n        this.score = 0;\n        this.questions = this.shuffleQuestions(questions, 30);\n        this.timer = 900; // 15 minutes in seconds\n        this.currentQuestionIndex = 0;\n        this.totalQuestions = 30;\n        this.userAnswers = {};\n        this.timerInterval = null;\n    }\n\n    // Stop timer\n        stopTimer() {\n            if(this.timerInterval) {\n                clearInterval(this.timerInterval);\n                this.timerInterval = null;\n            }\n        }\n\n    // Shuffle and limit questions\n    shuffleQuestions(questions, limit) {\n        const shuffled = questions.sort( () => 0.5 - Math.random());\n        return shuffled.slice(0, limit);\n    }\n\n// Check answer \n    checkAnswer(selectedOption) {\n        const currentQuestion = this.questions[this.currentQuestionIndex];\n        if (selectedOption === currentQuestion.answer) {\n            this.score++;\n            return true;\n        }\n        return false;\n    }\n\n     // save user's answer\n    saveAnswer(questionIndex, selectedOption) {\n        this.userAnswers[questionIndex] = selectedOption;\n    }\n    \n    //  get saved answer\n    getSavedAnswer(questionIndex) {\n        return this.userAnswers[questionIndex];\n    }\n\n    // Submit quiz\n    submitQuiz() {\n\n        // calculate final score \n        this.score = 0;\n        for (let i = 0; i < this.totalQuestions; i++) {\n            const savedAnswer = this.getSavedAnswer(i);\n            const correctAnswer = this.questions[i].answer;\n            if (savedAnswer === correctAnswer) {\n                this.score++;\n            }\n        }\n\n        // Logic to handle quiz submission\n        const scoreEl = document.querySelector('.quiz-score');\n        scoreEl.textContent = `${this.score} / ${this.totalQuestions}`;\n \n    }\n\n    //Quiz remarks \n    getRemarks() {\n        const percentage = (this.score / this.totalQuestions) * 100;\n        const remarksEl = document.querySelector('.quiz-remarks');\n        if (percentage >= 80) {\n            remarksEl.textContent = `Excellent Work! You scored ${percentage.toFixed(2)}%`;\n        } else if (percentage >= 50) {\n            remarksEl.textContent = `Great job! You scored ${percentage.toFixed(2)}%`;\n        } else {\n            remarksEl.textContent = `You scored ${percentage.toFixed(2)}%. Better luck next time!`;\n        }\n    }\n\n    // Quiz summary\n    getSummary() {\n        const summaryEl = document.querySelector('.quiz-summary');\n        const correctEl = document.querySelector('#correct-answers');\n        const incorrectEl = document.querySelector('#incorrect-answers');\n        const unansweredEl = document.querySelector('#unanswered-questions');\n\n        correctEl.textContent = this.score;\n        incorrectEl.textContent = this.totalQuestions - this.score;\n        unansweredEl.textContent = this.totalQuestions - Object.keys(this.userAnswers).length;\n    }\n}\n\n\n// UI Class\nclass UI {\n    static displayQuestionContent(quiz) {\n        const questionContainer = document.querySelector('.question-content');\n        const questionEl = document.querySelector('.question-text');\n        const optionsEl = document.querySelector('.question-options');\n\n    // Current Question\n    const currentQuestion = quiz.questions[quiz.currentQuestionIndex];\n\n    // Display question\n    questionEl.textContent = currentQuestion.question;\n\n    // clear old options \n    optionsEl.innerHTML = '';\n\n    // Display options\n    currentQuestion.options.forEach( (option, index) => {\n        const optionDiv = document.createElement('div');\n        optionDiv.className = 'option';\n        optionDiv.textContent = option;\n        optionDiv.dataset.index = index;\n\n         // show previously selected option\n        if (option === quiz.getSavedAnswer(quiz.currentQuestionIndex)) {\n            optionDiv.classList.add('selected');\n        }\n\n        optionsEl.appendChild(optionDiv);\n    });\n\n\n    // Update question tracker\n    this.updateQuestionTracker(quiz);\n}\n\n    // Add selected class to a selected  option\n    static selectedOption(optionEl) {\n        const options = document.querySelectorAll('.option');\n        options.forEach(option => option.classList.remove('selected'));\n        optionEl.classList.add('selected');\n    }\n\n    // question tracker\n    static updateQuestionTracker(quiz) {\n        const trackerEl = document.querySelector('.question-tracker');\n        trackerEl.textContent = `${quiz.currentQuestionIndex + 1} / ${quiz.totalQuestions}`;\n    }\n\n    // Timer\n    static startTimer(quiz) {\n        let timer = quiz.timer, minutes, seconds;\n        let timerDisplay = document.querySelector('.timer-display');\n\n        // clear any existing timer\n        if (quiz.timerInterval) {\n            clearInterval(quiz.timerInterval);\n        }\n\n        \n        // Update the timer every second\n        quiz.timerInterval = setInterval( () => {\n            minutes = parseInt(timer / 60, 10);\n            seconds = parseInt(timer % 60, 10);\n\n            minutes = minutes < 10 ? \"0\" + minutes : minutes;\n            seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n            timerDisplay.textContent = `${minutes}:${seconds}`;\n\n            if (--timer < 0) {\n                clearInterval(quiz.timerInterval);\n                quiz.timerInterval = null;\n                // Time's up, submit the quiz\n                UI.showFinalResults(quiz);\n            }\n            quiz.timer = timer; // update quiz timer state\n        }, 1000);\n    }\n\n    // Move to next question\n    static nextQuestion(quiz) {\n        if (quiz.currentQuestionIndex < quiz.totalQuestions - 1) {\n            quiz.currentQuestionIndex++;\n            this.displayQuestionContent(quiz);\n        }\n    }\n\n    // Move to previous question\n    static prevQuestion(quiz) {\n        if (quiz.currentQuestionIndex > 0) {\n            quiz.currentQuestionIndex--;\n            this.displayQuestionContent(quiz);\n        }\n    }\n\n    // Show results\n    static showFinalResults(quiz) {\n    quiz.stopTimer();\n    quiz.submitQuiz();\n    quiz.getRemarks();\n    quiz.getSummary();\n    Store.saveCompletedQuiz(quiz);\n    Store.clearProgress();\n\n\n    // Stop the timer\n    const timerDisplay = document.querySelector('.timer-display');\n    timerDisplay.textContent = '00:00';\n\n    // Hide quiz section and show results section\n    document.querySelector('.question-container').style.display = 'none';\n    document.querySelector('.result-container').style.display = 'block';\n    }\n\n}\n\n\n// Local Storage \nclass Store {\n\n\n    // Auto save Quiz progress\n    static saveProgress(quiz) {\n        try {\n            const progress = {\n                currentQuestionIndex: quiz.currentQuestionIndex,\n                timer: quiz.timer,\n                userAnswers: quiz.userAnswers,\n            }\n            localStorage.setItem(this.STORAGE_KEY.PROGRESS, JSON.stringify(progress));\n            return true;\n        } catch(error) {\n            console.error('Error Saving progress:', error);\n            return false;\n        }\n    }\n\n    // load saved quiz progress\n    static loadProgress() {\n                try {\n                    const savedProgress = localStorage.getItem(this.STORAGE_KEY.PROGRESS);\n                    return savedProgress ? JSON.parse(savedProgress) : null;\n                } catch(error) {\n                    console.error('Error loading progress:', error);\n                    return null;\n                }\n            }\n\n    // check for saved progress\n        static hasSavedProgress() {\n            return localStorage.getItem(this.STORAGE_KEY.PROGRESS) !== null;\n        }\n\n    // clear saved progress after quiz completion\n        static clearProgress() {\n        try {\n            localStorage.removeItem(this.STORAGE_KEY.PROGRESS); \n        } catch(error) {\n            console.error('Error clearing progress:', error);\n        }\n        }\n\n\n    // Save Completed quiz results\n    static saveCompletedQuiz(quiz) {\n        try {\n            const History = this.getHistory()\n\n            const quizRecord = {\n                date: new Date().toISOString().split('T')[0],\n                score: quiz.score,\n                totalQuestions: quiz.totalQuestions,\n                Answers: this._formatAnswers(quiz),\n                timeTaken: 900 - quiz.timer, // time taken in seconds\n                remarks: quiz.remarks,\n                summary: quiz.summary,\n            };\n\n            History.unshift(quizRecord);\n            localStorage.setItem(this.STORAGE_KEY.RESULTS, JSON.stringify(History));\n            return true;\n        }  catch(error) {\n            console.error('Error saving completed quiz:', error);\n            return false;\n        }\n    };\n\n    // Format Answers\n    static _formatAnswers(quiz) {\n        const formattedAnswers = {};\n\n        quiz.questions.forEach( (question, index) => {\n            const userAnswer = quiz.userAnswers[index];\n            formattedAnswers[index] = {\n                question: question.question,\n                options: question.options,\n                selected: userAnswer || 'Unanswered',\n                correct: question.answer,\n                isCorrect: userAnswer === question.answer,\n            };\n        });\n        return formattedAnswers;\n    };\n\n    // Get quiz history\n    static getHistory() {\n        try {\n            const history = localStorage.getItem(this.STORAGE_KEY.RESULTS); \n            return history ? JSON.parse(history) : [];\n        } catch(error) {\n            console.error('Error getting quiz history:', error);\n            return [];\n        }\n    };\n}\n\n// Storage keys\nStore.STORAGE_KEY = {\n    PROGRESS: 'quizProgress',\n    RESULTS: 'quizResults',\n};\n\n\n// Event listeners\n\n// store quiz instance globally\nlet quizInstance;\n\n// display question on DOM load\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (Store.hasSavedProgress()) {\n        const shouldResume = confirm('You have a saved quiz progress. Do you want to resume?');\n    \n    if (shouldResume) {\n        const progress = Store.loadProgress();\n        quizInstance = new Quiz(questions);\n\n        // Restore state\n        quizInstance.currentQuestionIndex = progress.currentQuestionIndex;\n        quizInstance.timer = progress.timer;\n        quizInstance.userAnswers = progress.userAnswers;\n\n        UI.displayQuestionContent(quizInstance);\n        UI.startTimer(quizInstance);\n    }  else{\n        // Clear saved progress and start new quiz\n        Store.clearProgress();\n        quizInstance = new Quiz(questions);\n        UI.displayQuestionContent(quizInstance);\n        UI.startTimer(quizInstance);\n    }\n\n    } else {\n        // No saved progress, start new quiz\n        quizInstance = new Quiz(questions);\n        UI.displayQuestionContent(quizInstance);\n        UI.startTimer(quizInstance);\n    }\n});\n\n// Handle option selection\ndocument.querySelector('.question-options').addEventListener('click', (e) => {\n    if (e.target.classList.contains('option')) {\n        UI.selectedOption(e.target);\n\n        // Save selected option\n        const selectedOption = e.target.textContent;\n        quizInstance.saveAnswer(quizInstance.currentQuestionIndex, selectedOption);\n        Store.saveProgress(quizInstance);\n    }\n});\n\n\n// Handle previous button \ndocument.querySelector('.prev-button').addEventListener('click', () => {\n    UI.prevQuestion(quizInstance);\n});\n\n// Handle next button and submit button\nconst  nextButton = document.querySelector('.next-button');\nnextButton.addEventListener('click', getResult);\n\nfunction getResult() {\n    if (quizInstance.currentQuestionIndex === quizInstance.totalQuestions - 1) {\n        // Show final results\n        UI.showFinalResults(quizInstance);\n\n\n    } else {\n        // Move to next question\n        UI.nextQuestion(quizInstance);\n\n         // Check if NEXT question is the last one, then change button text\n        if (quizInstance.currentQuestionIndex === quizInstance.totalQuestions - 1) {\n            nextButton.textContent = 'Submit';\n        }\n    }\n}"]}