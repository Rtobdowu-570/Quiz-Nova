{"version":3,"sources":["quiz.js"],"names":["Quiz","questions","score","shuffleQuestions","timer","currentQuestionIndex","totalQuestions","userAnswers","timerInterval","clearInterval","limit","shuffled","sort","Math","random","slice","selectedOption","currentQuestion","answer","questionIndex","i","savedAnswer","getSavedAnswer","correctAnswer","scoreEl","document","querySelector","textContent","percentage","remarksEl","toFixed","summaryEl","correctEl","incorrectEl","unansweredEl","Object","keys","length","UI","quiz","questionContainer","questionEl","optionsEl","question","innerHTML","options","forEach","option","index","optionDiv","createElement","className","dataset","classList","add","appendChild","updateQuestionTracker","optionEl","querySelectorAll","remove","trackerEl","minutes","seconds","timerDisplay","setInterval","parseInt","showFinalResults","displayQuestionContent","stopTimer","submitQuiz","getRemarks","getSummary","Store","saveCompletedQuiz","clearProgress","style","display","progress","localStorage","setItem","STORAGE_KEY","PROGRESS","JSON","stringify","error","console","savedProgress","getItem","parse","removeItem","History","getHistory","quizRecord","date","Date","toISOString","split","Answers","_formatAnswers","timeTaken","remarks","summary","unshift","RESULTS","formattedAnswers","userAnswer","selected","correct","isCorrect","history","quizInstance","addEventListener","hasSavedProgress","shouldResume","confirm","loadProgress","startTimer","e","target","contains","saveAnswer","saveProgress","prevQuestion","nextButton","getResult","nextQuestion"],"mappings":"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","sourcesContent":["// Quiz Class\nclass Quiz {\n    constructor(questions) {\n        this.score = 0;\n        this.questions = this.shuffleQuestions(questions, 30);\n        this.timer = 900; // 15 minutes in seconds\n        this.currentQuestionIndex = 0;\n        this.totalQuestions = 30;\n        this.userAnswers = {};\n        this.timerInterval = null;\n    }\n\n    // Stop timer\n        stopTimer() {\n            if(this.timerInterval) {\n                clearInterval(this.timerInterval);\n                this.timerInterval = null;\n            }\n        }\n\n    // Shuffle and limit questions\n    shuffleQuestions(questions, limit) {\n        const shuffled = questions.sort( () => 0.5 - Math.random());\n        return shuffled.slice(0, limit);\n    }\n\n// Check answer \n    checkAnswer(selectedOption) {\n        const currentQuestion = this.questions[this.currentQuestionIndex];\n        if (selectedOption === currentQuestion.answer) {\n            this.score++;\n            return true;\n        }\n        return false;\n    }\n\n     // save user's answer\n    saveAnswer(questionIndex, selectedOption) {\n        this.userAnswers[questionIndex] = selectedOption;\n    }\n    \n    //  get saved answer\n    getSavedAnswer(questionIndex) {\n        return this.userAnswers[questionIndex];\n    }\n\n    // Submit quiz\n    submitQuiz() {\n\n        // calculate final score \n        this.score = 0;\n        for (let i = 0; i < this.totalQuestions; i++) {\n            const savedAnswer = this.getSavedAnswer(i);\n            const correctAnswer = this.questions[i].answer;\n            if (savedAnswer === correctAnswer) {\n                this.score++;\n            }\n        }\n\n        // Logic to handle quiz submission\n        const scoreEl = document.querySelector('.quiz-score');\n        scoreEl.textContent = `${this.score} / ${this.totalQuestions}`;\n \n    }\n\n    //Quiz remarks \n    getRemarks() {\n        const percentage = (this.score / this.totalQuestions) * 100;\n        const remarksEl = document.querySelector('.quiz-remarks');\n        if (percentage >= 80) {\n            remarksEl.textContent = `Excellent Work! You scored ${percentage.toFixed(2)}%`;\n        } else if (percentage >= 50) {\n            remarksEl.textContent = `Great job! You scored ${percentage.toFixed(2)}%`;\n        } else {\n            remarksEl.textContent = `You scored ${percentage.toFixed(2)}%. Better luck next time!`;\n        }\n    }\n\n    // Quiz summary\n    getSummary() {\n        const summaryEl = document.querySelector('.quiz-summary');\n        const correctEl = document.querySelector('#correct-answers');\n        const incorrectEl = document.querySelector('#incorrect-answers');\n        const unansweredEl = document.querySelector('#unanswered-questions');\n\n        correctEl.textContent = this.score;\n        incorrectEl.textContent = this.totalQuestions - this.score;\n        unansweredEl.textContent = this.totalQuestions - Object.keys(this.userAnswers).length;\n    }\n}\n\n\n// UI Class\nclass UI {\n    static displayQuestionContent(quiz) {\n        const questionContainer = document.querySelector('.question-content');\n        const questionEl = document.querySelector('.question-text');\n        const optionsEl = document.querySelector('.question-options');\n\n    // Current Question\n    const currentQuestion = quiz.questions[quiz.currentQuestionIndex];\n\n    // Display question\n    questionEl.textContent = currentQuestion.question;\n\n    // clear old options \n    optionsEl.innerHTML = '';\n\n    // Display options\n    currentQuestion.options.forEach( (option, index) => {\n        const optionDiv = document.createElement('div');\n        optionDiv.className = 'option';\n        optionDiv.textContent = option;\n        optionDiv.dataset.index = index;\n\n         // show previously selected option\n        if (option === quiz.getSavedAnswer(quiz.currentQuestionIndex)) {\n            optionDiv.classList.add('selected');\n        }\n\n        optionsEl.appendChild(optionDiv);\n    });\n\n\n    // Update question tracker\n    this.updateQuestionTracker(quiz);\n}\n\n    // Add selected class to a selected  option\n    static selectedOption(optionEl) {\n        const options = document.querySelectorAll('.option');\n        options.forEach(option => option.classList.remove('selected'));\n        optionEl.classList.add('selected');\n    }\n\n    // question tracker\n    static updateQuestionTracker(quiz) {\n        const trackerEl = document.querySelector('.question-tracker');\n        trackerEl.textContent = `${quiz.currentQuestionIndex + 1} / ${quiz.totalQuestions}`;\n    }\n\n    // Timer\n    static startTimer(quiz) {\n        let timer = quiz.timer, minutes, seconds;\n        let timerDisplay = document.querySelector('.timer-display');\n\n        // clear any existing timer\n        if (quiz.timerInterval) {\n            clearInterval(quiz.timerInterval);\n        }\n\n        \n        // Update the timer every second\n        quiz.timerInterval = setInterval( () => {\n            minutes = parseInt(timer / 60, 10);\n            seconds = parseInt(timer % 60, 10);\n\n            minutes = minutes < 10 ? \"0\" + minutes : minutes;\n            seconds = seconds < 10 ? \"0\" + seconds : seconds;\n\n            timerDisplay.textContent = `${minutes}:${seconds}`;\n\n            if (--timer < 0) {\n                clearInterval(quiz.timerInterval);\n                quiz.timerInterval = null;\n                // Time's up, submit the quiz\n                UI.showFinalResults(quiz);\n            }\n            quiz.timer = timer; // update quiz timer state\n        }, 1000);\n    }\n\n    // Move to next question\n    static nextQuestion(quiz) {\n        if (quiz.currentQuestionIndex < quiz.totalQuestions - 1) {\n            quiz.currentQuestionIndex++;\n            this.displayQuestionContent(quiz);\n        }\n    }\n\n    // Move to previous question\n    static prevQuestion(quiz) {\n        if (quiz.currentQuestionIndex > 0) {\n            quiz.currentQuestionIndex--;\n            this.displayQuestionContent(quiz);\n        }\n    }\n\n    // Show results\n    static showFinalResults(quiz) {\n    quiz.stopTimer();\n    quiz.submitQuiz();\n    quiz.getRemarks();\n    quiz.getSummary();\n    Store.saveCompletedQuiz(quiz);\n    Store.clearProgress();\n\n\n    // Stop the timer\n    const timerDisplay = document.querySelector('.timer-display');\n    timerDisplay.textContent = '00:00';\n\n    // Hide quiz section and show results section\n    document.querySelector('.question-container').style.display = 'none';\n    document.querySelector('.result-container').style.display = 'block';\n    }\n\n}\n\n\n// Local Storage \nclass Store {\n\n\n    // Auto save Quiz progress\n    static saveProgress(quiz) {\n        try {\n            const progress = {\n                currentQuestionIndex: quiz.currentQuestionIndex,\n                timer: quiz.timer,\n                userAnswers: quiz.userAnswers,\n                questions: quiz.questions,\n            }\n            localStorage.setItem(this.STORAGE_KEY.PROGRESS, JSON.stringify(progress));\n            return true;\n        } catch(error) {\n            console.error('Error Saving progress:', error);\n            return false;\n        }\n    }\n\n    // load saved quiz progress\n    static loadProgress() {\n                try {\n                    const savedProgress = localStorage.getItem(this.STORAGE_KEY.PROGRESS);\n                    return savedProgress ? JSON.parse(savedProgress) : null;\n                } catch(error) {\n                    console.error('Error loading progress:', error);\n                    return null;\n                }\n            }\n\n    // check for saved progress\n        static hasSavedProgress() {\n            return localStorage.getItem(this.STORAGE_KEY.PROGRESS) !== null;\n        }\n\n    // clear saved progress after quiz completion\n        static clearProgress() {\n        try {\n            localStorage.removeItem(this.STORAGE_KEY.PROGRESS); \n        } catch(error) {\n            console.error('Error clearing progress:', error);\n        }\n        }\n\n\n    // Save Completed quiz results\n    static saveCompletedQuiz(quiz) {\n        try {\n            const History = this.getHistory()\n\n            const quizRecord = {\n                date: new Date().toISOString().split('T')[0],\n                score: quiz.score,\n                totalQuestions: quiz.totalQuestions,\n                Answers: this._formatAnswers(quiz),\n                timeTaken: 900 - quiz.timer, // time taken in seconds\n                remarks: quiz.remarks,\n                summary: quiz.summary,\n            };\n\n            History.unshift(quizRecord);\n            localStorage.setItem(this.STORAGE_KEY.RESULTS, JSON.stringify(History));\n            return true;\n        }  catch(error) {\n            console.error('Error saving completed quiz:', error);\n            return false;\n        }\n    };\n\n    // Format Answers\n    static _formatAnswers(quiz) {\n        const formattedAnswers = {};\n\n        quiz.questions.forEach( (question, index) => {\n            const userAnswer = quiz.userAnswers[index];\n            formattedAnswers[index] = {\n                question: question.question,\n                options: question.options,\n                selected: userAnswer || 'Unanswered',\n                correct: question.answer,\n                isCorrect: userAnswer === question.answer,\n            };\n        });\n        return formattedAnswers;\n    };\n\n    // Get quiz history\n    static getHistory() {\n        try {\n            const history = localStorage.getItem(this.STORAGE_KEY.RESULTS); \n            return history ? JSON.parse(history) : [];\n        } catch(error) {\n            console.error('Error getting quiz history:', error);\n            return [];\n        }\n    };\n}\n\n// Storage keys\nStore.STORAGE_KEY = {\n    PROGRESS: 'quizProgress',\n    RESULTS: 'quizResults',\n};\n\n\n// Event listeners\n\n// store quiz instance globally\nlet quizInstance;\n\n// display question on DOM load\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (Store.hasSavedProgress()) {\n        const shouldResume = confirm('You have a saved quiz progress. Do you want to resume?');\n    \n    if (shouldResume) {\n        const progress = Store.loadProgress();\n        quizInstance = new Quiz(questions);\n\n        // Restore state\n        quizInstance.currentQuestionIndex = progress.currentQuestionIndex;\n        quizInstance.timer = progress.timer;\n        quizInstance.userAnswers = progress.userAnswers;\n\n        UI.displayQuestionContent(quizInstance);\n        UI.startTimer(quizInstance);\n    }  else{\n        // Clear saved progress and start new quiz\n        Store.clearProgress();\n        quizInstance = new Quiz(questions);\n        UI.displayQuestionContent(quizInstance);\n        UI.startTimer(quizInstance);\n    }\n\n    } else {\n        // No saved progress, start new quiz\n        quizInstance = new Quiz(questions);\n        UI.displayQuestionContent(quizInstance);\n        UI.startTimer(quizInstance);\n    }\n});\n\n// Handle option selection\ndocument.querySelector('.question-options').addEventListener('click', (e) => {\n    if (e.target.classList.contains('option')) {\n        UI.selectedOption(e.target);\n\n        // Save selected option\n        const selectedOption = e.target.textContent;\n        quizInstance.saveAnswer(quizInstance.currentQuestionIndex, selectedOption);\n        Store.saveProgress(quizInstance);\n    }\n});\n\n\n// Handle previous button \ndocument.querySelector('.prev-button').addEventListener('click', () => {\n    UI.prevQuestion(quizInstance);\n});\n\n// Handle next button and submit button\nconst  nextButton = document.querySelector('.next-button');\nnextButton.addEventListener('click', getResult);\n\nfunction getResult() {\n    if (quizInstance.currentQuestionIndex === quizInstance.totalQuestions - 1) {\n        // Show final results\n        UI.showFinalResults(quizInstance);\n\n\n    } else {\n        // Move to next question\n        UI.nextQuestion(quizInstance);\n\n         // Check if NEXT question is the last one, then change button text\n        if (quizInstance.currentQuestionIndex === quizInstance.totalQuestions - 1) {\n            nextButton.textContent = 'Submit';\n        }\n    }\n}"],"file":"quiz.dev.js"}